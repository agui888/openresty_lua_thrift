/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.test.thrift.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-12")
public class RpcService {

  public interface Iface {

    public List<String> funCall(ArgStruct argStruct, byte argByte, short argI16, int argI32, long argI64, double argDouble, String argString, Map<String, String> paramMapStrStr, Map<Integer, String> paramMapI32Str, Set<String> paramSetStr, Set<Long> paramSetI64, List<String> paramListStr, boolean argBool) throws TException;

  }

  public interface AsyncIface {

    public void funCall(ArgStruct argStruct, byte argByte, short argI16, int argI32, long argI64, double argDouble, String argString, Map<String, String> paramMapStrStr, Map<Integer, String> paramMapI32Str, Set<String> paramSetStr, Set<Long> paramSetI64, List<String> paramListStr, boolean argBool, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<String> funCall(ArgStruct argStruct, byte argByte, short argI16, int argI32, long argI64, double argDouble, String argString, Map<String,String> paramMapStrStr, Map<Integer,String> paramMapI32Str, Set<String> paramSetStr, Set<Long> paramSetI64, List<String> paramListStr, boolean argBool) throws TException
    {
      send_funCall(argStruct, argByte, argI16, argI32, argI64, argDouble, argString, paramMapStrStr, paramMapI32Str, paramSetStr, paramSetI64, paramListStr, argBool);
      return recv_funCall();
    }

    public void send_funCall(ArgStruct argStruct, byte argByte, short argI16, int argI32, long argI64, double argDouble, String argString, Map<String,String> paramMapStrStr, Map<Integer,String> paramMapI32Str, Set<String> paramSetStr, Set<Long> paramSetI64, List<String> paramListStr, boolean argBool) throws TException
    {
      funCall_args args = new funCall_args();
      args.setArgStruct(argStruct);
      args.setArgByte(argByte);
      args.setArgI16(argI16);
      args.setArgI32(argI32);
      args.setArgI64(argI64);
      args.setArgDouble(argDouble);
      args.setArgString(argString);
      args.setParamMapStrStr(paramMapStrStr);
      args.setParamMapI32Str(paramMapI32Str);
      args.setParamSetStr(paramSetStr);
      args.setParamSetI64(paramSetI64);
      args.setParamListStr(paramListStr);
      args.setArgBool(argBool);
      sendBase("funCall", args);
    }

    public List<String> recv_funCall() throws TException
    {
      funCall_result result = new funCall_result();
      receiveBase(result, "funCall");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "funCall failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void funCall(ArgStruct argStruct, byte argByte, short argI16, int argI32, long argI64, double argDouble, String argString, Map<String,String> paramMapStrStr, Map<Integer,String> paramMapI32Str, Set<String> paramSetStr, Set<Long> paramSetI64, List<String> paramListStr, boolean argBool, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      funCall_call method_call = new funCall_call(argStruct, argByte, argI16, argI32, argI64, argDouble, argString, paramMapStrStr, paramMapI32Str, paramSetStr, paramSetI64, paramListStr, argBool, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class funCall_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ArgStruct argStruct;
      private byte argByte;
      private short argI16;
      private int argI32;
      private long argI64;
      private double argDouble;
      private String argString;
      private Map<String,String> paramMapStrStr;
      private Map<Integer,String> paramMapI32Str;
      private Set<String> paramSetStr;
      private Set<Long> paramSetI64;
      private List<String> paramListStr;
      private boolean argBool;
      public funCall_call(ArgStruct argStruct, byte argByte, short argI16, int argI32, long argI64, double argDouble, String argString, Map<String,String> paramMapStrStr, Map<Integer,String> paramMapI32Str, Set<String> paramSetStr, Set<Long> paramSetI64, List<String> paramListStr, boolean argBool, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.argStruct = argStruct;
        this.argByte = argByte;
        this.argI16 = argI16;
        this.argI32 = argI32;
        this.argI64 = argI64;
        this.argDouble = argDouble;
        this.argString = argString;
        this.paramMapStrStr = paramMapStrStr;
        this.paramMapI32Str = paramMapI32Str;
        this.paramSetStr = paramSetStr;
        this.paramSetI64 = paramSetI64;
        this.paramListStr = paramListStr;
        this.argBool = argBool;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("funCall", org.apache.thrift.protocol.TMessageType.CALL, 0));
        funCall_args args = new funCall_args();
        args.setArgStruct(argStruct);
        args.setArgByte(argByte);
        args.setArgI16(argI16);
        args.setArgI32(argI32);
        args.setArgI64(argI64);
        args.setArgDouble(argDouble);
        args.setArgString(argString);
        args.setParamMapStrStr(paramMapStrStr);
        args.setParamMapI32Str(paramMapI32Str);
        args.setParamSetStr(paramSetStr);
        args.setParamSetI64(paramSetI64);
        args.setParamListStr(paramListStr);
        args.setArgBool(argBool);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_funCall();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("funCall", new funCall());
      return processMap;
    }

    public static class funCall<I extends Iface> extends org.apache.thrift.ProcessFunction<I, funCall_args> {
      public funCall() {
        super("funCall");
      }

      public funCall_args getEmptyArgsInstance() {
        return new funCall_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public funCall_result getResult(I iface, funCall_args args) throws TException {
        funCall_result result = new funCall_result();
        result.success = iface.funCall(args.argStruct, args.argByte, args.argI16, args.argI32, args.argI64, args.argDouble, args.argString, args.paramMapStrStr, args.paramMapI32Str, args.paramSetStr, args.paramSetI64, args.paramListStr, args.argBool);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("funCall", new funCall());
      return processMap;
    }

    public static class funCall<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, funCall_args, List<String>> {
      public funCall() {
        super("funCall");
      }

      public funCall_args getEmptyArgsInstance() {
        return new funCall_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            funCall_result result = new funCall_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            funCall_result result = new funCall_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, funCall_args args, AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.funCall(args.argStruct, args.argByte, args.argI16, args.argI32, args.argI64, args.argDouble, args.argString, args.paramMapStrStr, args.paramMapI32Str, args.paramSetStr, args.paramSetI64, args.paramListStr, args.argBool,resultHandler);
      }
    }

  }

  public static class funCall_args implements org.apache.thrift.TBase<funCall_args, funCall_args._Fields>, java.io.Serializable, Cloneable, Comparable<funCall_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("funCall_args");

    private static final org.apache.thrift.protocol.TField ARG_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("argStruct", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARG_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("argByte", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField ARG_I16_FIELD_DESC = new org.apache.thrift.protocol.TField("argI16", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField ARG_I32_FIELD_DESC = new org.apache.thrift.protocol.TField("argI32", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField ARG_I64_FIELD_DESC = new org.apache.thrift.protocol.TField("argI64", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField ARG_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("argDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField ARG_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("argString", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_STR_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMapStrStr", org.apache.thrift.protocol.TType.MAP, (short)8);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_I32_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMapI32Str", org.apache.thrift.protocol.TType.MAP, (short)9);
    private static final org.apache.thrift.protocol.TField PARAM_SET_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paramSetStr", org.apache.thrift.protocol.TType.SET, (short)10);
    private static final org.apache.thrift.protocol.TField PARAM_SET_I64_FIELD_DESC = new org.apache.thrift.protocol.TField("paramSetI64", org.apache.thrift.protocol.TType.SET, (short)11);
    private static final org.apache.thrift.protocol.TField PARAM_LIST_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paramListStr", org.apache.thrift.protocol.TType.LIST, (short)12);
    private static final org.apache.thrift.protocol.TField ARG_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("argBool", org.apache.thrift.protocol.TType.BOOL, (short)13);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new funCall_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new funCall_argsTupleSchemeFactory());
    }

    public ArgStruct argStruct; // required
    public byte argByte; // required
    public short argI16; // required
    public int argI32; // required
    public long argI64; // required
    public double argDouble; // required
    public String argString; // required
    public Map<String,String> paramMapStrStr; // required
    public Map<Integer,String> paramMapI32Str; // required
    public Set<String> paramSetStr; // required
    public Set<Long> paramSetI64; // required
    public List<String> paramListStr; // required
    public boolean argBool; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG_STRUCT((short)1, "argStruct"),
      ARG_BYTE((short)2, "argByte"),
      ARG_I16((short)3, "argI16"),
      ARG_I32((short)4, "argI32"),
      ARG_I64((short)5, "argI64"),
      ARG_DOUBLE((short)6, "argDouble"),
      ARG_STRING((short)7, "argString"),
      PARAM_MAP_STR_STR((short)8, "paramMapStrStr"),
      PARAM_MAP_I32_STR((short)9, "paramMapI32Str"),
      PARAM_SET_STR((short)10, "paramSetStr"),
      PARAM_SET_I64((short)11, "paramSetI64"),
      PARAM_LIST_STR((short)12, "paramListStr"),
      ARG_BOOL((short)13, "argBool");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG_STRUCT
            return ARG_STRUCT;
          case 2: // ARG_BYTE
            return ARG_BYTE;
          case 3: // ARG_I16
            return ARG_I16;
          case 4: // ARG_I32
            return ARG_I32;
          case 5: // ARG_I64
            return ARG_I64;
          case 6: // ARG_DOUBLE
            return ARG_DOUBLE;
          case 7: // ARG_STRING
            return ARG_STRING;
          case 8: // PARAM_MAP_STR_STR
            return PARAM_MAP_STR_STR;
          case 9: // PARAM_MAP_I32_STR
            return PARAM_MAP_I32_STR;
          case 10: // PARAM_SET_STR
            return PARAM_SET_STR;
          case 11: // PARAM_SET_I64
            return PARAM_SET_I64;
          case 12: // PARAM_LIST_STR
            return PARAM_LIST_STR;
          case 13: // ARG_BOOL
            return ARG_BOOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ARGBYTE_ISSET_ID = 0;
    private static final int __ARGI16_ISSET_ID = 1;
    private static final int __ARGI32_ISSET_ID = 2;
    private static final int __ARGI64_ISSET_ID = 3;
    private static final int __ARGDOUBLE_ISSET_ID = 4;
    private static final int __ARGBOOL_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("argStruct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ArgStruct.class)));
      tmpMap.put(_Fields.ARG_BYTE, new org.apache.thrift.meta_data.FieldMetaData("argByte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields.ARG_I16, new org.apache.thrift.meta_data.FieldMetaData("argI16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.ARG_I32, new org.apache.thrift.meta_data.FieldMetaData("argI32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ARG_I64, new org.apache.thrift.meta_data.FieldMetaData("argI64", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ARG_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("argDouble", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.ARG_STRING, new org.apache.thrift.meta_data.FieldMetaData("argString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM_MAP_STR_STR, new org.apache.thrift.meta_data.FieldMetaData("paramMapStrStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PARAM_MAP_I32_STR, new org.apache.thrift.meta_data.FieldMetaData("paramMapI32Str", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PARAM_SET_STR, new org.apache.thrift.meta_data.FieldMetaData("paramSetStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PARAM_SET_I64, new org.apache.thrift.meta_data.FieldMetaData("paramSetI64", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.PARAM_LIST_STR, new org.apache.thrift.meta_data.FieldMetaData("paramListStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ARG_BOOL, new org.apache.thrift.meta_data.FieldMetaData("argBool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(funCall_args.class, metaDataMap);
    }

    public funCall_args() {
    }

    public funCall_args(
      ArgStruct argStruct,
      byte argByte,
      short argI16,
      int argI32,
      long argI64,
      double argDouble,
      String argString,
      Map<String,String> paramMapStrStr,
      Map<Integer,String> paramMapI32Str,
      Set<String> paramSetStr,
      Set<Long> paramSetI64,
      List<String> paramListStr,
      boolean argBool)
    {
      this();
      this.argStruct = argStruct;
      this.argByte = argByte;
      setArgByteIsSet(true);
      this.argI16 = argI16;
      setArgI16IsSet(true);
      this.argI32 = argI32;
      setArgI32IsSet(true);
      this.argI64 = argI64;
      setArgI64IsSet(true);
      this.argDouble = argDouble;
      setArgDoubleIsSet(true);
      this.argString = argString;
      this.paramMapStrStr = paramMapStrStr;
      this.paramMapI32Str = paramMapI32Str;
      this.paramSetStr = paramSetStr;
      this.paramSetI64 = paramSetI64;
      this.paramListStr = paramListStr;
      this.argBool = argBool;
      setArgBoolIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public funCall_args(funCall_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetArgStruct()) {
        this.argStruct = new ArgStruct(other.argStruct);
      }
      this.argByte = other.argByte;
      this.argI16 = other.argI16;
      this.argI32 = other.argI32;
      this.argI64 = other.argI64;
      this.argDouble = other.argDouble;
      if (other.isSetArgString()) {
        this.argString = other.argString;
      }
      if (other.isSetParamMapStrStr()) {
        Map<String,String> __this__paramMapStrStr = new HashMap<String,String>(other.paramMapStrStr);
        this.paramMapStrStr = __this__paramMapStrStr;
      }
      if (other.isSetParamMapI32Str()) {
        Map<Integer,String> __this__paramMapI32Str = new HashMap<Integer,String>(other.paramMapI32Str);
        this.paramMapI32Str = __this__paramMapI32Str;
      }
      if (other.isSetParamSetStr()) {
        Set<String> __this__paramSetStr = new HashSet<String>(other.paramSetStr);
        this.paramSetStr = __this__paramSetStr;
      }
      if (other.isSetParamSetI64()) {
        Set<Long> __this__paramSetI64 = new HashSet<Long>(other.paramSetI64);
        this.paramSetI64 = __this__paramSetI64;
      }
      if (other.isSetParamListStr()) {
        List<String> __this__paramListStr = new ArrayList<String>(other.paramListStr);
        this.paramListStr = __this__paramListStr;
      }
      this.argBool = other.argBool;
    }

    public funCall_args deepCopy() {
      return new funCall_args(this);
    }

    @Override
    public void clear() {
      this.argStruct = null;
      setArgByteIsSet(false);
      this.argByte = 0;
      setArgI16IsSet(false);
      this.argI16 = 0;
      setArgI32IsSet(false);
      this.argI32 = 0;
      setArgI64IsSet(false);
      this.argI64 = 0;
      setArgDoubleIsSet(false);
      this.argDouble = 0.0;
      this.argString = null;
      this.paramMapStrStr = null;
      this.paramMapI32Str = null;
      this.paramSetStr = null;
      this.paramSetI64 = null;
      this.paramListStr = null;
      setArgBoolIsSet(false);
      this.argBool = false;
    }

    public ArgStruct getArgStruct() {
      return this.argStruct;
    }

    public funCall_args setArgStruct(ArgStruct argStruct) {
      this.argStruct = argStruct;
      return this;
    }

    public void unsetArgStruct() {
      this.argStruct = null;
    }

    /** Returns true if field argStruct is set (has been assigned a value) and false otherwise */
    public boolean isSetArgStruct() {
      return this.argStruct != null;
    }

    public void setArgStructIsSet(boolean value) {
      if (!value) {
        this.argStruct = null;
      }
    }

    public byte getArgByte() {
      return this.argByte;
    }

    public funCall_args setArgByte(byte argByte) {
      this.argByte = argByte;
      setArgByteIsSet(true);
      return this;
    }

    public void unsetArgByte() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARGBYTE_ISSET_ID);
    }

    /** Returns true if field argByte is set (has been assigned a value) and false otherwise */
    public boolean isSetArgByte() {
      return EncodingUtils.testBit(__isset_bitfield, __ARGBYTE_ISSET_ID);
    }

    public void setArgByteIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARGBYTE_ISSET_ID, value);
    }

    public short getArgI16() {
      return this.argI16;
    }

    public funCall_args setArgI16(short argI16) {
      this.argI16 = argI16;
      setArgI16IsSet(true);
      return this;
    }

    public void unsetArgI16() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARGI16_ISSET_ID);
    }

    /** Returns true if field argI16 is set (has been assigned a value) and false otherwise */
    public boolean isSetArgI16() {
      return EncodingUtils.testBit(__isset_bitfield, __ARGI16_ISSET_ID);
    }

    public void setArgI16IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARGI16_ISSET_ID, value);
    }

    public int getArgI32() {
      return this.argI32;
    }

    public funCall_args setArgI32(int argI32) {
      this.argI32 = argI32;
      setArgI32IsSet(true);
      return this;
    }

    public void unsetArgI32() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARGI32_ISSET_ID);
    }

    /** Returns true if field argI32 is set (has been assigned a value) and false otherwise */
    public boolean isSetArgI32() {
      return EncodingUtils.testBit(__isset_bitfield, __ARGI32_ISSET_ID);
    }

    public void setArgI32IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARGI32_ISSET_ID, value);
    }

    public long getArgI64() {
      return this.argI64;
    }

    public funCall_args setArgI64(long argI64) {
      this.argI64 = argI64;
      setArgI64IsSet(true);
      return this;
    }

    public void unsetArgI64() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARGI64_ISSET_ID);
    }

    /** Returns true if field argI64 is set (has been assigned a value) and false otherwise */
    public boolean isSetArgI64() {
      return EncodingUtils.testBit(__isset_bitfield, __ARGI64_ISSET_ID);
    }

    public void setArgI64IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARGI64_ISSET_ID, value);
    }

    public double getArgDouble() {
      return this.argDouble;
    }

    public funCall_args setArgDouble(double argDouble) {
      this.argDouble = argDouble;
      setArgDoubleIsSet(true);
      return this;
    }

    public void unsetArgDouble() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARGDOUBLE_ISSET_ID);
    }

    /** Returns true if field argDouble is set (has been assigned a value) and false otherwise */
    public boolean isSetArgDouble() {
      return EncodingUtils.testBit(__isset_bitfield, __ARGDOUBLE_ISSET_ID);
    }

    public void setArgDoubleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARGDOUBLE_ISSET_ID, value);
    }

    public String getArgString() {
      return this.argString;
    }

    public funCall_args setArgString(String argString) {
      this.argString = argString;
      return this;
    }

    public void unsetArgString() {
      this.argString = null;
    }

    /** Returns true if field argString is set (has been assigned a value) and false otherwise */
    public boolean isSetArgString() {
      return this.argString != null;
    }

    public void setArgStringIsSet(boolean value) {
      if (!value) {
        this.argString = null;
      }
    }

    public int getParamMapStrStrSize() {
      return (this.paramMapStrStr == null) ? 0 : this.paramMapStrStr.size();
    }

    public void putToParamMapStrStr(String key, String val) {
      if (this.paramMapStrStr == null) {
        this.paramMapStrStr = new HashMap<String,String>();
      }
      this.paramMapStrStr.put(key, val);
    }

    public Map<String,String> getParamMapStrStr() {
      return this.paramMapStrStr;
    }

    public funCall_args setParamMapStrStr(Map<String,String> paramMapStrStr) {
      this.paramMapStrStr = paramMapStrStr;
      return this;
    }

    public void unsetParamMapStrStr() {
      this.paramMapStrStr = null;
    }

    /** Returns true if field paramMapStrStr is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMapStrStr() {
      return this.paramMapStrStr != null;
    }

    public void setParamMapStrStrIsSet(boolean value) {
      if (!value) {
        this.paramMapStrStr = null;
      }
    }

    public int getParamMapI32StrSize() {
      return (this.paramMapI32Str == null) ? 0 : this.paramMapI32Str.size();
    }

    public void putToParamMapI32Str(int key, String val) {
      if (this.paramMapI32Str == null) {
        this.paramMapI32Str = new HashMap<Integer,String>();
      }
      this.paramMapI32Str.put(key, val);
    }

    public Map<Integer,String> getParamMapI32Str() {
      return this.paramMapI32Str;
    }

    public funCall_args setParamMapI32Str(Map<Integer,String> paramMapI32Str) {
      this.paramMapI32Str = paramMapI32Str;
      return this;
    }

    public void unsetParamMapI32Str() {
      this.paramMapI32Str = null;
    }

    /** Returns true if field paramMapI32Str is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMapI32Str() {
      return this.paramMapI32Str != null;
    }

    public void setParamMapI32StrIsSet(boolean value) {
      if (!value) {
        this.paramMapI32Str = null;
      }
    }

    public int getParamSetStrSize() {
      return (this.paramSetStr == null) ? 0 : this.paramSetStr.size();
    }

    public java.util.Iterator<String> getParamSetStrIterator() {
      return (this.paramSetStr == null) ? null : this.paramSetStr.iterator();
    }

    public void addToParamSetStr(String elem) {
      if (this.paramSetStr == null) {
        this.paramSetStr = new HashSet<String>();
      }
      this.paramSetStr.add(elem);
    }

    public Set<String> getParamSetStr() {
      return this.paramSetStr;
    }

    public funCall_args setParamSetStr(Set<String> paramSetStr) {
      this.paramSetStr = paramSetStr;
      return this;
    }

    public void unsetParamSetStr() {
      this.paramSetStr = null;
    }

    /** Returns true if field paramSetStr is set (has been assigned a value) and false otherwise */
    public boolean isSetParamSetStr() {
      return this.paramSetStr != null;
    }

    public void setParamSetStrIsSet(boolean value) {
      if (!value) {
        this.paramSetStr = null;
      }
    }

    public int getParamSetI64Size() {
      return (this.paramSetI64 == null) ? 0 : this.paramSetI64.size();
    }

    public java.util.Iterator<Long> getParamSetI64Iterator() {
      return (this.paramSetI64 == null) ? null : this.paramSetI64.iterator();
    }

    public void addToParamSetI64(long elem) {
      if (this.paramSetI64 == null) {
        this.paramSetI64 = new HashSet<Long>();
      }
      this.paramSetI64.add(elem);
    }

    public Set<Long> getParamSetI64() {
      return this.paramSetI64;
    }

    public funCall_args setParamSetI64(Set<Long> paramSetI64) {
      this.paramSetI64 = paramSetI64;
      return this;
    }

    public void unsetParamSetI64() {
      this.paramSetI64 = null;
    }

    /** Returns true if field paramSetI64 is set (has been assigned a value) and false otherwise */
    public boolean isSetParamSetI64() {
      return this.paramSetI64 != null;
    }

    public void setParamSetI64IsSet(boolean value) {
      if (!value) {
        this.paramSetI64 = null;
      }
    }

    public int getParamListStrSize() {
      return (this.paramListStr == null) ? 0 : this.paramListStr.size();
    }

    public java.util.Iterator<String> getParamListStrIterator() {
      return (this.paramListStr == null) ? null : this.paramListStr.iterator();
    }

    public void addToParamListStr(String elem) {
      if (this.paramListStr == null) {
        this.paramListStr = new ArrayList<String>();
      }
      this.paramListStr.add(elem);
    }

    public List<String> getParamListStr() {
      return this.paramListStr;
    }

    public funCall_args setParamListStr(List<String> paramListStr) {
      this.paramListStr = paramListStr;
      return this;
    }

    public void unsetParamListStr() {
      this.paramListStr = null;
    }

    /** Returns true if field paramListStr is set (has been assigned a value) and false otherwise */
    public boolean isSetParamListStr() {
      return this.paramListStr != null;
    }

    public void setParamListStrIsSet(boolean value) {
      if (!value) {
        this.paramListStr = null;
      }
    }

    public boolean isArgBool() {
      return this.argBool;
    }

    public funCall_args setArgBool(boolean argBool) {
      this.argBool = argBool;
      setArgBoolIsSet(true);
      return this;
    }

    public void unsetArgBool() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARGBOOL_ISSET_ID);
    }

    /** Returns true if field argBool is set (has been assigned a value) and false otherwise */
    public boolean isSetArgBool() {
      return EncodingUtils.testBit(__isset_bitfield, __ARGBOOL_ISSET_ID);
    }

    public void setArgBoolIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARGBOOL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG_STRUCT:
        if (value == null) {
          unsetArgStruct();
        } else {
          setArgStruct((ArgStruct)value);
        }
        break;

      case ARG_BYTE:
        if (value == null) {
          unsetArgByte();
        } else {
          setArgByte((Byte)value);
        }
        break;

      case ARG_I16:
        if (value == null) {
          unsetArgI16();
        } else {
          setArgI16((Short)value);
        }
        break;

      case ARG_I32:
        if (value == null) {
          unsetArgI32();
        } else {
          setArgI32((Integer)value);
        }
        break;

      case ARG_I64:
        if (value == null) {
          unsetArgI64();
        } else {
          setArgI64((Long)value);
        }
        break;

      case ARG_DOUBLE:
        if (value == null) {
          unsetArgDouble();
        } else {
          setArgDouble((Double)value);
        }
        break;

      case ARG_STRING:
        if (value == null) {
          unsetArgString();
        } else {
          setArgString((String)value);
        }
        break;

      case PARAM_MAP_STR_STR:
        if (value == null) {
          unsetParamMapStrStr();
        } else {
          setParamMapStrStr((Map<String,String>)value);
        }
        break;

      case PARAM_MAP_I32_STR:
        if (value == null) {
          unsetParamMapI32Str();
        } else {
          setParamMapI32Str((Map<Integer,String>)value);
        }
        break;

      case PARAM_SET_STR:
        if (value == null) {
          unsetParamSetStr();
        } else {
          setParamSetStr((Set<String>)value);
        }
        break;

      case PARAM_SET_I64:
        if (value == null) {
          unsetParamSetI64();
        } else {
          setParamSetI64((Set<Long>)value);
        }
        break;

      case PARAM_LIST_STR:
        if (value == null) {
          unsetParamListStr();
        } else {
          setParamListStr((List<String>)value);
        }
        break;

      case ARG_BOOL:
        if (value == null) {
          unsetArgBool();
        } else {
          setArgBool((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG_STRUCT:
        return getArgStruct();

      case ARG_BYTE:
        return getArgByte();

      case ARG_I16:
        return getArgI16();

      case ARG_I32:
        return getArgI32();

      case ARG_I64:
        return getArgI64();

      case ARG_DOUBLE:
        return getArgDouble();

      case ARG_STRING:
        return getArgString();

      case PARAM_MAP_STR_STR:
        return getParamMapStrStr();

      case PARAM_MAP_I32_STR:
        return getParamMapI32Str();

      case PARAM_SET_STR:
        return getParamSetStr();

      case PARAM_SET_I64:
        return getParamSetI64();

      case PARAM_LIST_STR:
        return getParamListStr();

      case ARG_BOOL:
        return isArgBool();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG_STRUCT:
        return isSetArgStruct();
      case ARG_BYTE:
        return isSetArgByte();
      case ARG_I16:
        return isSetArgI16();
      case ARG_I32:
        return isSetArgI32();
      case ARG_I64:
        return isSetArgI64();
      case ARG_DOUBLE:
        return isSetArgDouble();
      case ARG_STRING:
        return isSetArgString();
      case PARAM_MAP_STR_STR:
        return isSetParamMapStrStr();
      case PARAM_MAP_I32_STR:
        return isSetParamMapI32Str();
      case PARAM_SET_STR:
        return isSetParamSetStr();
      case PARAM_SET_I64:
        return isSetParamSetI64();
      case PARAM_LIST_STR:
        return isSetParamListStr();
      case ARG_BOOL:
        return isSetArgBool();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof funCall_args)
        return this.equals((funCall_args)that);
      return false;
    }

    public boolean equals(funCall_args that) {
      if (that == null)
        return false;

      boolean this_present_argStruct = true && this.isSetArgStruct();
      boolean that_present_argStruct = true && that.isSetArgStruct();
      if (this_present_argStruct || that_present_argStruct) {
        if (!(this_present_argStruct && that_present_argStruct))
          return false;
        if (!this.argStruct.equals(that.argStruct))
          return false;
      }

      boolean this_present_argByte = true;
      boolean that_present_argByte = true;
      if (this_present_argByte || that_present_argByte) {
        if (!(this_present_argByte && that_present_argByte))
          return false;
        if (this.argByte != that.argByte)
          return false;
      }

      boolean this_present_argI16 = true;
      boolean that_present_argI16 = true;
      if (this_present_argI16 || that_present_argI16) {
        if (!(this_present_argI16 && that_present_argI16))
          return false;
        if (this.argI16 != that.argI16)
          return false;
      }

      boolean this_present_argI32 = true;
      boolean that_present_argI32 = true;
      if (this_present_argI32 || that_present_argI32) {
        if (!(this_present_argI32 && that_present_argI32))
          return false;
        if (this.argI32 != that.argI32)
          return false;
      }

      boolean this_present_argI64 = true;
      boolean that_present_argI64 = true;
      if (this_present_argI64 || that_present_argI64) {
        if (!(this_present_argI64 && that_present_argI64))
          return false;
        if (this.argI64 != that.argI64)
          return false;
      }

      boolean this_present_argDouble = true;
      boolean that_present_argDouble = true;
      if (this_present_argDouble || that_present_argDouble) {
        if (!(this_present_argDouble && that_present_argDouble))
          return false;
        if (this.argDouble != that.argDouble)
          return false;
      }

      boolean this_present_argString = true && this.isSetArgString();
      boolean that_present_argString = true && that.isSetArgString();
      if (this_present_argString || that_present_argString) {
        if (!(this_present_argString && that_present_argString))
          return false;
        if (!this.argString.equals(that.argString))
          return false;
      }

      boolean this_present_paramMapStrStr = true && this.isSetParamMapStrStr();
      boolean that_present_paramMapStrStr = true && that.isSetParamMapStrStr();
      if (this_present_paramMapStrStr || that_present_paramMapStrStr) {
        if (!(this_present_paramMapStrStr && that_present_paramMapStrStr))
          return false;
        if (!this.paramMapStrStr.equals(that.paramMapStrStr))
          return false;
      }

      boolean this_present_paramMapI32Str = true && this.isSetParamMapI32Str();
      boolean that_present_paramMapI32Str = true && that.isSetParamMapI32Str();
      if (this_present_paramMapI32Str || that_present_paramMapI32Str) {
        if (!(this_present_paramMapI32Str && that_present_paramMapI32Str))
          return false;
        if (!this.paramMapI32Str.equals(that.paramMapI32Str))
          return false;
      }

      boolean this_present_paramSetStr = true && this.isSetParamSetStr();
      boolean that_present_paramSetStr = true && that.isSetParamSetStr();
      if (this_present_paramSetStr || that_present_paramSetStr) {
        if (!(this_present_paramSetStr && that_present_paramSetStr))
          return false;
        if (!this.paramSetStr.equals(that.paramSetStr))
          return false;
      }

      boolean this_present_paramSetI64 = true && this.isSetParamSetI64();
      boolean that_present_paramSetI64 = true && that.isSetParamSetI64();
      if (this_present_paramSetI64 || that_present_paramSetI64) {
        if (!(this_present_paramSetI64 && that_present_paramSetI64))
          return false;
        if (!this.paramSetI64.equals(that.paramSetI64))
          return false;
      }

      boolean this_present_paramListStr = true && this.isSetParamListStr();
      boolean that_present_paramListStr = true && that.isSetParamListStr();
      if (this_present_paramListStr || that_present_paramListStr) {
        if (!(this_present_paramListStr && that_present_paramListStr))
          return false;
        if (!this.paramListStr.equals(that.paramListStr))
          return false;
      }

      boolean this_present_argBool = true;
      boolean that_present_argBool = true;
      if (this_present_argBool || that_present_argBool) {
        if (!(this_present_argBool && that_present_argBool))
          return false;
        if (this.argBool != that.argBool)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_argStruct = true && (isSetArgStruct());
      list.add(present_argStruct);
      if (present_argStruct)
        list.add(argStruct);

      boolean present_argByte = true;
      list.add(present_argByte);
      if (present_argByte)
        list.add(argByte);

      boolean present_argI16 = true;
      list.add(present_argI16);
      if (present_argI16)
        list.add(argI16);

      boolean present_argI32 = true;
      list.add(present_argI32);
      if (present_argI32)
        list.add(argI32);

      boolean present_argI64 = true;
      list.add(present_argI64);
      if (present_argI64)
        list.add(argI64);

      boolean present_argDouble = true;
      list.add(present_argDouble);
      if (present_argDouble)
        list.add(argDouble);

      boolean present_argString = true && (isSetArgString());
      list.add(present_argString);
      if (present_argString)
        list.add(argString);

      boolean present_paramMapStrStr = true && (isSetParamMapStrStr());
      list.add(present_paramMapStrStr);
      if (present_paramMapStrStr)
        list.add(paramMapStrStr);

      boolean present_paramMapI32Str = true && (isSetParamMapI32Str());
      list.add(present_paramMapI32Str);
      if (present_paramMapI32Str)
        list.add(paramMapI32Str);

      boolean present_paramSetStr = true && (isSetParamSetStr());
      list.add(present_paramSetStr);
      if (present_paramSetStr)
        list.add(paramSetStr);

      boolean present_paramSetI64 = true && (isSetParamSetI64());
      list.add(present_paramSetI64);
      if (present_paramSetI64)
        list.add(paramSetI64);

      boolean present_paramListStr = true && (isSetParamListStr());
      list.add(present_paramListStr);
      if (present_paramListStr)
        list.add(paramListStr);

      boolean present_argBool = true;
      list.add(present_argBool);
      if (present_argBool)
        list.add(argBool);

      return list.hashCode();
    }

    @Override
    public int compareTo(funCall_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArgStruct()).compareTo(other.isSetArgStruct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgStruct()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argStruct, other.argStruct);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArgByte()).compareTo(other.isSetArgByte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgByte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argByte, other.argByte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArgI16()).compareTo(other.isSetArgI16());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgI16()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argI16, other.argI16);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArgI32()).compareTo(other.isSetArgI32());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgI32()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argI32, other.argI32);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArgI64()).compareTo(other.isSetArgI64());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgI64()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argI64, other.argI64);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArgDouble()).compareTo(other.isSetArgDouble());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgDouble()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argDouble, other.argDouble);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArgString()).compareTo(other.isSetArgString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argString, other.argString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMapStrStr()).compareTo(other.isSetParamMapStrStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMapStrStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMapStrStr, other.paramMapStrStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMapI32Str()).compareTo(other.isSetParamMapI32Str());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMapI32Str()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMapI32Str, other.paramMapI32Str);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamSetStr()).compareTo(other.isSetParamSetStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamSetStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramSetStr, other.paramSetStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamSetI64()).compareTo(other.isSetParamSetI64());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamSetI64()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramSetI64, other.paramSetI64);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamListStr()).compareTo(other.isSetParamListStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamListStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramListStr, other.paramListStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArgBool()).compareTo(other.isSetArgBool());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgBool()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argBool, other.argBool);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("funCall_args(");
      boolean first = true;

      sb.append("argStruct:");
      if (this.argStruct == null) {
        sb.append("null");
      } else {
        sb.append(this.argStruct);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("argByte:");
      sb.append(this.argByte);
      first = false;
      if (!first) sb.append(", ");
      sb.append("argI16:");
      sb.append(this.argI16);
      first = false;
      if (!first) sb.append(", ");
      sb.append("argI32:");
      sb.append(this.argI32);
      first = false;
      if (!first) sb.append(", ");
      sb.append("argI64:");
      sb.append(this.argI64);
      first = false;
      if (!first) sb.append(", ");
      sb.append("argDouble:");
      sb.append(this.argDouble);
      first = false;
      if (!first) sb.append(", ");
      sb.append("argString:");
      if (this.argString == null) {
        sb.append("null");
      } else {
        sb.append(this.argString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMapStrStr:");
      if (this.paramMapStrStr == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMapStrStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMapI32Str:");
      if (this.paramMapI32Str == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMapI32Str);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramSetStr:");
      if (this.paramSetStr == null) {
        sb.append("null");
      } else {
        sb.append(this.paramSetStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramSetI64:");
      if (this.paramSetI64 == null) {
        sb.append("null");
      } else {
        sb.append(this.paramSetI64);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramListStr:");
      if (this.paramListStr == null) {
        sb.append("null");
      } else {
        sb.append(this.paramListStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("argBool:");
      sb.append(this.argBool);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (argStruct != null) {
        argStruct.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class funCall_argsStandardSchemeFactory implements SchemeFactory {
      public funCall_argsStandardScheme getScheme() {
        return new funCall_argsStandardScheme();
      }
    }

    private static class funCall_argsStandardScheme extends StandardScheme<funCall_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, funCall_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG_STRUCT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.argStruct = new ArgStruct();
                struct.argStruct.read(iprot);
                struct.setArgStructIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARG_BYTE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.argByte = iprot.readByte();
                struct.setArgByteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARG_I16
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.argI16 = iprot.readI16();
                struct.setArgI16IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ARG_I32
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.argI32 = iprot.readI32();
                struct.setArgI32IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ARG_I64
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.argI64 = iprot.readI64();
                struct.setArgI64IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ARG_DOUBLE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.argDouble = iprot.readDouble();
                struct.setArgDoubleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ARG_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.argString = iprot.readString();
                struct.setArgStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // PARAM_MAP_STR_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.paramMapStrStr = new HashMap<String,String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.paramMapStrStr.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapStrStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // PARAM_MAP_I32_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                  struct.paramMapI32Str = new HashMap<Integer,String>(2*_map4.size);
                  int _key5;
                  String _val6;
                  for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                  {
                    _key5 = iprot.readI32();
                    _val6 = iprot.readString();
                    struct.paramMapI32Str.put(_key5, _val6);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapI32StrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // PARAM_SET_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                  struct.paramSetStr = new HashSet<String>(2*_set8.size);
                  String _elem9;
                  for (int _i10 = 0; _i10 < _set8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.paramSetStr.add(_elem9);
                  }
                  iprot.readSetEnd();
                }
                struct.setParamSetStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // PARAM_SET_I64
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set11 = iprot.readSetBegin();
                  struct.paramSetI64 = new HashSet<Long>(2*_set11.size);
                  long _elem12;
                  for (int _i13 = 0; _i13 < _set11.size; ++_i13)
                  {
                    _elem12 = iprot.readI64();
                    struct.paramSetI64.add(_elem12);
                  }
                  iprot.readSetEnd();
                }
                struct.setParamSetI64IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // PARAM_LIST_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                  struct.paramListStr = new ArrayList<String>(_list14.size);
                  String _elem15;
                  for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                  {
                    _elem15 = iprot.readString();
                    struct.paramListStr.add(_elem15);
                  }
                  iprot.readListEnd();
                }
                struct.setParamListStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // ARG_BOOL
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.argBool = iprot.readBool();
                struct.setArgBoolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, funCall_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.argStruct != null) {
          oprot.writeFieldBegin(ARG_STRUCT_FIELD_DESC);
          struct.argStruct.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ARG_BYTE_FIELD_DESC);
        oprot.writeByte(struct.argByte);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ARG_I16_FIELD_DESC);
        oprot.writeI16(struct.argI16);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ARG_I32_FIELD_DESC);
        oprot.writeI32(struct.argI32);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ARG_I64_FIELD_DESC);
        oprot.writeI64(struct.argI64);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ARG_DOUBLE_FIELD_DESC);
        oprot.writeDouble(struct.argDouble);
        oprot.writeFieldEnd();
        if (struct.argString != null) {
          oprot.writeFieldBegin(ARG_STRING_FIELD_DESC);
          oprot.writeString(struct.argString);
          oprot.writeFieldEnd();
        }
        if (struct.paramMapStrStr != null) {
          oprot.writeFieldBegin(PARAM_MAP_STR_STR_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMapStrStr.size()));
            for (Map.Entry<String, String> _iter17 : struct.paramMapStrStr.entrySet())
            {
              oprot.writeString(_iter17.getKey());
              oprot.writeString(_iter17.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.paramMapI32Str != null) {
          oprot.writeFieldBegin(PARAM_MAP_I32_STR_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.paramMapI32Str.size()));
            for (Map.Entry<Integer, String> _iter18 : struct.paramMapI32Str.entrySet())
            {
              oprot.writeI32(_iter18.getKey());
              oprot.writeString(_iter18.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.paramSetStr != null) {
          oprot.writeFieldBegin(PARAM_SET_STR_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.paramSetStr.size()));
            for (String _iter19 : struct.paramSetStr)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.paramSetI64 != null) {
          oprot.writeFieldBegin(PARAM_SET_I64_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.paramSetI64.size()));
            for (long _iter20 : struct.paramSetI64)
            {
              oprot.writeI64(_iter20);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.paramListStr != null) {
          oprot.writeFieldBegin(PARAM_LIST_STR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.paramListStr.size()));
            for (String _iter21 : struct.paramListStr)
            {
              oprot.writeString(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ARG_BOOL_FIELD_DESC);
        oprot.writeBool(struct.argBool);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class funCall_argsTupleSchemeFactory implements SchemeFactory {
      public funCall_argsTupleScheme getScheme() {
        return new funCall_argsTupleScheme();
      }
    }

    private static class funCall_argsTupleScheme extends TupleScheme<funCall_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, funCall_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArgStruct()) {
          optionals.set(0);
        }
        if (struct.isSetArgByte()) {
          optionals.set(1);
        }
        if (struct.isSetArgI16()) {
          optionals.set(2);
        }
        if (struct.isSetArgI32()) {
          optionals.set(3);
        }
        if (struct.isSetArgI64()) {
          optionals.set(4);
        }
        if (struct.isSetArgDouble()) {
          optionals.set(5);
        }
        if (struct.isSetArgString()) {
          optionals.set(6);
        }
        if (struct.isSetParamMapStrStr()) {
          optionals.set(7);
        }
        if (struct.isSetParamMapI32Str()) {
          optionals.set(8);
        }
        if (struct.isSetParamSetStr()) {
          optionals.set(9);
        }
        if (struct.isSetParamSetI64()) {
          optionals.set(10);
        }
        if (struct.isSetParamListStr()) {
          optionals.set(11);
        }
        if (struct.isSetArgBool()) {
          optionals.set(12);
        }
        oprot.writeBitSet(optionals, 13);
        if (struct.isSetArgStruct()) {
          struct.argStruct.write(oprot);
        }
        if (struct.isSetArgByte()) {
          oprot.writeByte(struct.argByte);
        }
        if (struct.isSetArgI16()) {
          oprot.writeI16(struct.argI16);
        }
        if (struct.isSetArgI32()) {
          oprot.writeI32(struct.argI32);
        }
        if (struct.isSetArgI64()) {
          oprot.writeI64(struct.argI64);
        }
        if (struct.isSetArgDouble()) {
          oprot.writeDouble(struct.argDouble);
        }
        if (struct.isSetArgString()) {
          oprot.writeString(struct.argString);
        }
        if (struct.isSetParamMapStrStr()) {
          {
            oprot.writeI32(struct.paramMapStrStr.size());
            for (Map.Entry<String, String> _iter22 : struct.paramMapStrStr.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeString(_iter22.getValue());
            }
          }
        }
        if (struct.isSetParamMapI32Str()) {
          {
            oprot.writeI32(struct.paramMapI32Str.size());
            for (Map.Entry<Integer, String> _iter23 : struct.paramMapI32Str.entrySet())
            {
              oprot.writeI32(_iter23.getKey());
              oprot.writeString(_iter23.getValue());
            }
          }
        }
        if (struct.isSetParamSetStr()) {
          {
            oprot.writeI32(struct.paramSetStr.size());
            for (String _iter24 : struct.paramSetStr)
            {
              oprot.writeString(_iter24);
            }
          }
        }
        if (struct.isSetParamSetI64()) {
          {
            oprot.writeI32(struct.paramSetI64.size());
            for (long _iter25 : struct.paramSetI64)
            {
              oprot.writeI64(_iter25);
            }
          }
        }
        if (struct.isSetParamListStr()) {
          {
            oprot.writeI32(struct.paramListStr.size());
            for (String _iter26 : struct.paramListStr)
            {
              oprot.writeString(_iter26);
            }
          }
        }
        if (struct.isSetArgBool()) {
          oprot.writeBool(struct.argBool);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, funCall_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(13);
        if (incoming.get(0)) {
          struct.argStruct = new ArgStruct();
          struct.argStruct.read(iprot);
          struct.setArgStructIsSet(true);
        }
        if (incoming.get(1)) {
          struct.argByte = iprot.readByte();
          struct.setArgByteIsSet(true);
        }
        if (incoming.get(2)) {
          struct.argI16 = iprot.readI16();
          struct.setArgI16IsSet(true);
        }
        if (incoming.get(3)) {
          struct.argI32 = iprot.readI32();
          struct.setArgI32IsSet(true);
        }
        if (incoming.get(4)) {
          struct.argI64 = iprot.readI64();
          struct.setArgI64IsSet(true);
        }
        if (incoming.get(5)) {
          struct.argDouble = iprot.readDouble();
          struct.setArgDoubleIsSet(true);
        }
        if (incoming.get(6)) {
          struct.argString = iprot.readString();
          struct.setArgStringIsSet(true);
        }
        if (incoming.get(7)) {
          {
            org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMapStrStr = new HashMap<String,String>(2*_map27.size);
            String _key28;
            String _val29;
            for (int _i30 = 0; _i30 < _map27.size; ++_i30)
            {
              _key28 = iprot.readString();
              _val29 = iprot.readString();
              struct.paramMapStrStr.put(_key28, _val29);
            }
          }
          struct.setParamMapStrStrIsSet(true);
        }
        if (incoming.get(8)) {
          {
            org.apache.thrift.protocol.TMap _map31 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMapI32Str = new HashMap<Integer,String>(2*_map31.size);
            int _key32;
            String _val33;
            for (int _i34 = 0; _i34 < _map31.size; ++_i34)
            {
              _key32 = iprot.readI32();
              _val33 = iprot.readString();
              struct.paramMapI32Str.put(_key32, _val33);
            }
          }
          struct.setParamMapI32StrIsSet(true);
        }
        if (incoming.get(9)) {
          {
            org.apache.thrift.protocol.TSet _set35 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramSetStr = new HashSet<String>(2*_set35.size);
            String _elem36;
            for (int _i37 = 0; _i37 < _set35.size; ++_i37)
            {
              _elem36 = iprot.readString();
              struct.paramSetStr.add(_elem36);
            }
          }
          struct.setParamSetStrIsSet(true);
        }
        if (incoming.get(10)) {
          {
            org.apache.thrift.protocol.TSet _set38 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.paramSetI64 = new HashSet<Long>(2*_set38.size);
            long _elem39;
            for (int _i40 = 0; _i40 < _set38.size; ++_i40)
            {
              _elem39 = iprot.readI64();
              struct.paramSetI64.add(_elem39);
            }
          }
          struct.setParamSetI64IsSet(true);
        }
        if (incoming.get(11)) {
          {
            org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramListStr = new ArrayList<String>(_list41.size);
            String _elem42;
            for (int _i43 = 0; _i43 < _list41.size; ++_i43)
            {
              _elem42 = iprot.readString();
              struct.paramListStr.add(_elem42);
            }
          }
          struct.setParamListStrIsSet(true);
        }
        if (incoming.get(12)) {
          struct.argBool = iprot.readBool();
          struct.setArgBoolIsSet(true);
        }
      }
    }

  }

  public static class funCall_result implements org.apache.thrift.TBase<funCall_result, funCall_result._Fields>, java.io.Serializable, Cloneable, Comparable<funCall_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("funCall_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new funCall_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new funCall_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(funCall_result.class, metaDataMap);
    }

    public funCall_result() {
    }

    public funCall_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public funCall_result(funCall_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public funCall_result deepCopy() {
      return new funCall_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public funCall_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof funCall_result)
        return this.equals((funCall_result)that);
      return false;
    }

    public boolean equals(funCall_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(funCall_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("funCall_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class funCall_resultStandardSchemeFactory implements SchemeFactory {
      public funCall_resultStandardScheme getScheme() {
        return new funCall_resultStandardScheme();
      }
    }

    private static class funCall_resultStandardScheme extends StandardScheme<funCall_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, funCall_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list44.size);
                  String _elem45;
                  for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                  {
                    _elem45 = iprot.readString();
                    struct.success.add(_elem45);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, funCall_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter47 : struct.success)
            {
              oprot.writeString(_iter47);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class funCall_resultTupleSchemeFactory implements SchemeFactory {
      public funCall_resultTupleScheme getScheme() {
        return new funCall_resultTupleScheme();
      }
    }

    private static class funCall_resultTupleScheme extends TupleScheme<funCall_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, funCall_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter48 : struct.success)
            {
              oprot.writeString(_iter48);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, funCall_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list49.size);
            String _elem50;
            for (int _i51 = 0; _i51 < _list49.size; ++_i51)
            {
              _elem50 = iprot.readString();
              struct.success.add(_elem50);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
